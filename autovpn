#!/bin/bash

ssh_options="-o StrictHostKeyChecking=no -o NumberOfPasswordPrompts=1 -o ConnectTimeout=30 -t -t "
user='ubuntu'
get_script="wget http://git.io/vWVpZ --no-check-certificate -O openvpn-autoinstall.sh"
run_script="sudo bash ./openvpn-autoinstall.sh"
remote_path="\$HOME/aws_vpn.ovpn"

gray='\033[0m'
green='\033[00;32m'
red='\033[01;31m'
white='\033[01;37m'
yellow='\033[00;33m'


function usage {
	echo -e "${white}DESCRIPTION:\n       $gray\t $(basename $0) - AWS OpenVPN Deployment Tool.\n\t Project found at https://github.com/ttlequals0/autovpn"
	echo -e "${white}USAGE:\n       $gray ACTION\t [OPTIONS] "
	echo -e "       $white-h$gray\t Displays this message."	
	echo -e "       $white-i$gray\t AWS Instance type (Optional, Default is t2.micro)\n\t\t\t t2.nano t2.micro t2.small t2.medium t2.large *"	
	echo -e "       $white-k$gray\t Specify the name of AWS keypair (Required) **"
	echo -e "       $white-r$gray\t Specify AWS Region (Optional, will use default region)\n\t\t\t us-east-1 us-west-1 us-west-2 eu-west-1 eu-west-1\n\t\t\t \
ap-southeast-1 ap-northeast-1 ap-northeast-2 ap-southeast-2\n\t\t\t sa-east-1 cn-north-1 ***"
	echo -e "${white}NOTES:\n       $gray\t * - In reality any instance size can be given but the t2.micro is more than enough.\n\t ** - If you choose to deploy an endpoint in a different region make sure\n\t \
you have a keypair setup in that region.\n\t *** - Since all ami's aren't located in all regions the ami being used will need to\n\t be changed to one that exists in that region. An option to do this will be added soon\n\t \
fir now this will need to be manually changed in python script."
}


bail ()
{
	echo -e "${red}Something failed code $1"
  usage
	exit 
}

if ( ! getopts "k:hr:i:" opt); then
	usage;
	exit 1;
fi

while getopts ":k:hr:i:" opt; do
  case $opt in
    h)
      usage && exit 0
      ;; 
    i)
      instance_type="$OPTARG"
      ;;       	
    k)
      keyname="$OPTARG"
      ;;
    r)
      region="$OPTARG"
      ;;      
    \?)
      echo "Invalid option: -$OPTARG" >&2
      bail 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2 
      bail 2      
  esac
done

if [[ -z "$instance_type" ]]; then
	instance_type="t2.micro"
fi

if [[ -z "$region" ]]; then
	local_path="$(pwd)/aws_vpn.ovpn"
else
	local_path="$(pwd)/${region}_aws_vpn.ovpn"
fi


echo "Creating ec2 instance. This can take some time..."
instance_ip=$(python create_ec2.py "$keyname" "$instance_type" "$region")
[[ $instance_ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] || bail 3
echo -e "${green}Instance has been created $instance_ip"
echo -e "${yellow}Giving new instance some time to fully boot up..."
while [ "$status" != "0" ] 
do 
	echo -e "${yellow}$instance_ip is still booting..."
	sleep 15
	ssh-keyscan $instance_ip 2>&1 | grep -v "^$" > /dev/null
	status=$?
done

echo -e "${white}Setting up VPN on $instance_ip"
ssh $ssh_options "$user"@$instance_ip "$get_script && $run_script" || bail 4
scp $user@$instance_ip:"$remote_path" "$local_path" || bail 5
echo -e "${green}OpenVPN config file is located at $(pwd)"